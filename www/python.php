<?php // BigMap 2 Python3 export. Written by Ilya Zverev and Michael Behrens, licensed WTFPL.
header('Content-type: application/x-python');
header('Content-disposition: attachment; filename="bigmap.py"');

$l = '';
foreach( $layers as $layer ) {
	if( strlen($l) )
		$l .= ', ';
	$l .= '"'.str_replace('"', "\"", $layer).'"';
}
?>
#!/usr/bin/env python
# Generated by BigMap 2. Permalink: <?=$permalink ?>


import io, requests, datetime, time, re, random, asyncio, urllib
import aiohttp
# ^^^^^^ install "aiohttp" package | pip install aiohttp | easy_install aiohttp
# This is used to download more tiles at the same time, improving concurrency.

from PIL import Image, ImageDraw
# ^^^^^^ install "python-pillow" package | pip install Pillow | easy_install Pillow

(zoom, xmin, ymin, xmax, ymax) = (<?=$zoom ?>, <?=$xmin ?>, <?=$ymin ?>, <?=$xmax ?>, <?=$ymax ?>)
layers = [<?=$l ?>]
attribution = '<?=str_replace("'", "\'", $attrib_plain) ?>'
xsize = xmax - xmin + 1
ysize = ymax - ymin + 1
tilesize = 256

resultImage = Image.new("RGBA", (xsize * tilesize, ysize * tilesize), (0,0,0,0))
counter = 0

async def get(obj, session):
    url = obj.get('url')
    x = obj.get('x')
    y = obj.get('y')
    try:
        async with session.get(url=url) as response:
            resp = await response.read()
            print(
                "Successfully got url {} with resp of length {}.".format(url, len(resp))
            )
            image = Image.open(io.BytesIO(resp))
            resultImage.paste(
                image,
                ((x - xmin) * tilesize, (y - ymin) * tilesize),
                image.convert("RGBA"),
            )
    except Exception as e:
        print("Unable to get url {} due to {}.".format(url, e.__class__))


async def do_requests(objs):
    async with aiohttp.ClientSession() as session:
        print(objs)
        ret = await asyncio.gather(
            *[get(obj, session) for obj in objs]
        )
    print("Finalized all. Return is a list of len {} outputs.".format(len(ret)))


def main():
    print("l")
    objs = make_objs()
    asyncio.run(do_requests(objs))

    draw = ImageDraw.Draw(resultImage)
    draw.text((5, ysize * tilesize - 15), attribution, (0, 0, 0))
    del draw

    now = datetime.datetime.now()
    outputFileName = "map%02d-%02d%02d%02d-%02d%02d.png" % (
        zoom,
        now.year % 100,
        now.month,
        now.day,
        now.hour,
        now.minute,
    )
    resultImage.save(outputFileName)


def make_objs():
    ls = []
    for x in range(xmin, xmax + 1):
        for y in range(ymin, ymax + 1):
            for layer in layers:
                ls.append(make_obj(x, y, layer))
    return ls


def make_obj(x, y, layer):
    url = layer.replace("!x", str(x)).replace("!y", str(y)).replace("!z", str(zoom))
    match = re.search("{([a-z0-9]+)}", url)
    if match:
        url = url.replace(match.group(0), random.choice(match.group(1)))
    return {'url':url,'x':x,'y':y}


if __name__ == "__main__":
    main()
